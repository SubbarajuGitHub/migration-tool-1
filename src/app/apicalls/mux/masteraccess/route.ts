interface MetaData {
    environment: string,
    platformId: string
}

interface LogoImage {
    key: null,
    props: Record<string, string>,
    _onwer: string,
    _store: Record<string, string>
}

interface Credentials {
    publicKey: string,
    secretKey: string,
    logo: LogoImage
    additionalMetadata: MetaData
}

interface VideoConfig {
    encodingTier: string,
    playbackPolicy: Array<string>
}

interface PlatformCredentials {
    id: string,
    name: string,
    credentials: Credentials,
    config?: VideoConfig
}

const createMedia = async (destinationPlatform: PlatformCredentials, playbackId: string, mp4_support: string, videoId: string, source_url = null) => {
    const credentials = destinationPlatform?.credentials ? destinationPlatform.credentials : null;
    const url = 'https://v1.fastpix.io/on-demand';

    const config = destinationPlatform?.config ? destinationPlatform.config : null;
    const autoGeneratedCaptions = config?.autoGenerateCaptions == "1" ? true : false;
    const maxResolutionTier = config?.maxResolutionTier ? config.maxResolutionTier : null;
    const playbackPolicy = config?.playbackPolicy?.length === 1 ? "public" : "private";
    const testmode = config?.testMode ? config.testMode : null;

    const requestBody = {
        metadata: {
            "muxMediaId": videoId,
        },
        accessPolicy: playbackPolicy,
        maxResolution: maxResolutionTier,
        inputs: [
            {
                type: 'video',
                url: source_url,
                ...(testmode === "1" ? { startTime: 0, endTime: 10 } : {})
            },
        ],
        mp4Support: "capped_4k",
    };

    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'Authorization': 'Basic ' + Buffer.from(`${credentials?.publicKey}:${credentials?.secretKey}`).toString('base64'),
            },
            body: JSON.stringify(requestBody),
        });

        if (response.ok) {
            const res = await response.json();

            return {
                suceess: true,
                response: res
            }

        } else {

            return { success: false, message: "Failed tp create media" }
        }
    } catch (error) {

        return { success: false, message: "Failed tp create media" }
    }
};

export async function POST(request: Request) {
    const { videoIds, sourcePlatform, destinationPlatform } = await request.json();
    const credentials = sourcePlatform?.credentials ? sourcePlatform.credentials : null;

    try {
        let createdMedia = []
        for (const videoId of videoIds) {

            const response = await fetch(`https://api.mux.com/video/v1/assets/${videoId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Basic ' + Buffer.from(`${credentials?.publicKey}:${credentials?.secretKey}`).toString('base64'),
                }
            });

            if (response.status === 200) {
                const mediaData = await response.json();

                if (mediaData?.data?.master?.status === 'ready') {

                    const playbackId = mediaData?.data?.playback_ids?.[0]?.id;
                    const mp4_support = mediaData?.data?.mp4_support || 'none';
                    const videoId = mediaData?.data?.id;
                    const source_url = mediaData?.data?.master.url;
                    const result = await createMedia(destinationPlatform, playbackId, mp4_support, videoId, source_url); // Await the result here
                    createdMedia.push(result?.response);
                }

            } else {

                return new Response(JSON.stringify({ message: `Error fetching media data for video ID ${videoId}` }), { status: 400 });
            }
        }

        return new Response(JSON.stringify({ success: true, createdMedia }), { status: 200 });

    } catch (error) {

        return new Response(JSON.stringify({ message: "Error during media processing" }), { status: 500 });
    }
}
